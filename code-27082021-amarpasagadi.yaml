### overview

###		SNS--->SQS--->Lambda--->S3

###SNS

---
AWSTemplateFormatVersion: '2010-09-09'
Description: SNS Topic Create
Parameters:
  SubscriptionEndPoint:
    Type: String
    Description: The endpoint that receives notifications from the Amazon SNS topic.
      The endpoint value depends on the protocol that you specify. This could be a
      URL or ARN
  SubscriptionProtocol:
    Type: String
    Description: This is a subscription's protocol
    AllowedValues:
    - sqs
    Default: sqs
Mappings: {}
Conditions: {}
Resources:
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: {}
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Ref: SubscriptionEndPoint
      Protocol:
        Ref: SubscriptionProtocol
      TopicArn:
        Ref: SNSTopic

## SQS

---
AWSTemplateFormatVersion: '2010-09-09'
Description: SQS Create
Parameters:
  DelaySeconds:
    Description: The time in seconds that the delivery of all messages in the queue
      is delayed. You can specify an integer value of 0 to 900 (15 minutes).
    Type: Number
    Default: '5'
  MaximumMessageSize:
    Type: Number
    Description: The limit of how many bytes that a message can contain before Amazon
      SQS rejects it, 1024 bytes (1 KiB) to 262144 bytes (256 KiB)
    Default: '262144'
  MessageRetentionPeriod:
    Description: 'The number of seconds that Amazon SQS retains a message. You can
      specify an integer value from 60 seconds (1 minute) to 1209600 seconds (14 days). '
    Type: Number
    Default: '345600'
  ReceiveMessageWaitTimeSeconds:
    Description: Specifies the duration, in seconds, that the ReceiveMessage action
      call waits until a message is in the queue in order to include it in the response,
      as opposed to returning an empty response if a message is not yet available.
      1 to 20
    Type: Number
    Default: '0'
  UsedeadletterQueue:
    Description: A dead-letter queue is a queue that other (source) queues can target
      for messages that can't be processed (consumed) successfully. You can set aside
      and isolate these messages in the dead-letter queue to determine why their processing
      doesn't succeed.
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
  VisibilityTimeout:
    Description: This should be longer than the time it would take to process and
      delete a message, this should not exceed 12 hours.
    Type: Number
    Default: '5'
Mappings: {}
Conditions:
  CreateDeadLetterQueue:
    Fn::Equals:
    - Ref: UsedeadletterQueue
    - 'true'
Resources:
  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds:
        Ref: DelaySeconds
      MaximumMessageSize:
        Ref: MaximumMessageSize
      MessageRetentionPeriod:
        Ref: MessageRetentionPeriod
      ReceiveMessageWaitTimeSeconds:
        Ref: ReceiveMessageWaitTimeSeconds
      RedrivePolicy:
        Fn::If:
        - CreateDeadLetterQueue
        - deadLetterTargetArn:
            Fn::GetAtt:
            - MyDeadLetterQueue
            - Arn
          maxReceiveCount: 5
        - Ref: AWS::NoValue
      VisibilityTimeout:
        Ref: VisibilityTimeout
  MyDeadLetterQueue:
    Condition: CreateDeadLetterQueue
    Type: AWS::SQS::Queue
Outputs:
  QueueURL:
    Description: URL of newly created SQS Queue
    Value:
      Ref: SQSQueue
  QueueARN:
    Description: ARN of newly created SQS Queue
    Value:
      Fn::GetAtt:
      - SQSQueue
      - Arn
  QueueName:
    Description: Name newly created SQS Queue
    Value:
      Fn::GetAtt:
      - SQSQueue
      - QueueName
  DeadLetterQueueURL:
    Condition: CreateDeadLetterQueue
    Description: URL of the dead letter queue
    Value:
      Ref: MyDeadLetterQueue
  DeadLetterQueueARN:
    Condition: CreateDeadLetterQueue
    Description: ARN of the dead letter queue
    Value:
      Fn::GetAtt:
      - MyDeadLetterQueue
      - Arn



####Lambda

AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda for SQS
Parameters:
  EnvName: python
    Type: String
    Description: Name of an environment. 'dev', 'staging', 'prod' and any name.
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
  LambdaHandlerPath:  
    Type: String
    Description: Path of a Lambda Handler. 
    AllowedPattern: ^.*[^0-9]$
    ConstraintDescription: Must end with non-numeric character.
Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaRole
  LambdaFunctionName:
    Value:
      Ref: LambdaFunction
  LambdaFunctionARN:
    Description: Lambda function ARN.
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
    Export:
      Name:
        Fn::Sub: LambdaARN-${EnvName}
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: lambda-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName:
        Fn::Sub: lambda-function-${EnvName}
      Description: LambdaFunctioni of nodejs10.x.
      Runtime: nodejs10.x
      Code:
        ZipFile:
          "exports.handler = function(event, context){\n
            var sample = sample;"
      Handler: ${LambdaHandlerPath}
      MemorySize: 128
      Timeout: 10
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          ENV:
            Fn::Sub: ${EnvName}
          TZ: UTC
          
###S3

AWSTemplateFormatVersion: 2010-09-09
Description: S3Buc
Parameters:
  BucketName:
    Type: String
    Description: 'S3BucketwithVersioning'
  PublisherAccountID:
    Type: String
    Description: 'The AWS account ID with whom you are sharing access'
Resources:
  S3BUCKET:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
### Versioning is enabled
      VersioningConfiguration:
        Status: Enabled
  S3BUCKETPOL:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3BUCKET
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: CrossAccPolicyDoc
            Action: "s3:ListBucket"
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BUCKET}'
            Principal:
              AWS: !Join ['', ["arn:aws:iam::", !Ref PublisherAccountID, ":root"]]
          - Sid: CrossAccPolicyDoc
            Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3BUCKET}/*'
            Principal:
              AWS: !Join ['', ["arn:aws:iam::", !Ref PublisherAccountID, ":root"]]

### End


